# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yCw2GfhxwX5e1ihWPle4GgcfOv3mkfsz

## init
"""

pip install google-generativeai langgraph langchain gradio

import google.generativeai as genai
from google.api_core.client_options import ClientOptions

openwather_api_key = "17084f2cf7cc52c3f245f8fc68c147fe"

metis_api_key = "tpsg-kweH1WRiC1a8N6a723wtYLKLASpPHFt"

genai.configure(api_key=metis_api_key, transport='rest',
                client_options=ClientOptions(api_endpoint="https://api.tapsage.com"))

llm = genai.GenerativeModel("gemini-2.0-flash")

output = llm.generate_content("hello how are you today?").text

output

"""## Agent 1

"""

from typing import Dict, TypedDict, List
from langgraph.graph import StateGraph

class AgentState(TypedDict):
  message : str

def greeting_node(state: AgentState) -> AgentState:
  """ Simple Greeting Node """

  state["message"] = "Hello " + state["message"] + " How are you? "

  return state

graph = StateGraph(AgentState)

graph.add_node("greeter" , greeting_node)

graph.set_entry_point("greeter")
graph.set_finish_point("greeter")

app = graph.compile()

from IPython.display import Image, display
display(Image(app.get_graph().draw_mermaid_png()))

result = app.invoke( { "message" : "Akbar" } )

result

"""Agent 2"""

import sys, subprocess, os, requests, datetime
import google.generativeai as genai
from langgraph.graph import StateGraph, START, END
from pydantic import BaseModel, Field
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser

class TripState(TypedDict):
    user_input: str
    city: str
    user_interests: List[str]
    weather_info: str
    final_itinerary: str

"""**Interest**"""

class InterestSchema(BaseModel):
    interests: List[str]

interest_parser = JsonOutputParser(pydantic_object=InterestSchema)

interest_prompt = PromptTemplate.from_template(
    "Extract a concise json list of user interests (max = 3 most important) from the following request. {format_instructions}\nRequest: {user_input}"
).partial(format_instructions=interest_parser.get_format_instructions())

def interest_node(state: TripState):
    prompt = interest_prompt.format( user_input=state["user_input"] )
    result = llm.generate_content(prompt).text

    parsed_result = interest_parser.parse(result)

    state["user_interests"] = parsed_result["interests"]
    return state

# debug

fake_state: TripState = {
    "user_input": "من از دوچرخه سواری و شنا خوشم میاد و آخر هفته ها دوست دارم فیلم ببینم و به گل هام رسیدگی کنم.همچنین از سفر خیلی خوشم میاد و دوست دارم توی آب های آزاد شنا کنم.",
    "user_interests": [],
    "weather_info": "",
    "final_itinerary": ""
}

fake_node = interest_node(fake_state)

print(fake_node["user_interests"])

"""**Weather**"""

def fetch_weather(city: str, start_date: datetime.date, days: int = 1):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={openwather_api_key}&units=metric"
    try:
        data = requests.get(url, timeout=30).json()
        forecasts = []

        for entry in data.get("list", []):
            dt = datetime.datetime.fromtimestamp(entry["dt"]).date()
            if start_date <= dt < start_date + datetime.timedelta(days=days):
                forecasts.append({
                    "timestamp": entry["dt"],
                    "date": dt.isoformat(),
                    "weather": entry["weather"][0]["description"],
                    "temperature": entry["main"]["temp"],
                    "feels_like": entry["main"]["feels_like"],
                    "humidity": entry["main"]["humidity"],
                    "wind_speed": entry["wind"]["speed"],
                    "pressure": entry["main"]["pressure"]
                })

        return {
            "city": city,
            "start_date": start_date.isoformat(),
            "days": days,
            "forecasts": forecasts,
            "status": "success" if forecasts else "no data available"
        }
    except Exception as e:
        return {
            "city": city,
            "start_date": start_date.isoformat(),
            "days": days,
            "forecasts": [],
            "status": "error",
            "error_message": str(e)
        }

# debug

city = "London"
start_date = datetime.date.today()
days = 1

result = fetch_weather(city, start_date, days)

result

import json

def weather_node(state: TripState) -> TripState:
    user_input = state["user_input"]

    # LLM call to find correct city name for OpenWeatherMap API
    city_prompt = f"""
    Extract the destination city from this user input: '{user_input}'

    Task:
    1. Identify the city the user wants to travel to (input may be in any language)
    2. Return the standardized English city name compatible with OpenWeatherMap API

    Examples:
    - Input: 'سلام من قراره برم اصفهان و اطلاعات میخوام از اونجا' → Output: Esfahan
    - Input: 'I want to visit New York' → Output: New York
    - Input: 'Planning a trip to 東京' → Output: Tokyo

    Rules:
    - Return only the city name in English
    - Use the exact spelling recognized by OpenWeatherMap API
    - If no city is found, return "CITY_NOT_FOUND"
    - No additional text or explanations

    City name:"""

    corrected_city = llm.generate_content(city_prompt).text

    if (corrected_city == "CITY_NOT_FOUND"):
      forecast = "No data is available about weather."
      state["city"] = ""
    else:
      today = datetime.date.today()
      forecast = fetch_weather(corrected_city, today, days=1)

      # LLM call to generate 5-line summary in Persian
      summary_prompt = f"""
      You are given the following weather forecast JSON data for {corrected_city}:
      {json.dumps(forecast, indent=2, ensure_ascii=False)}

      1. Generate a 5-line summary in Persian describing the weather conditions, including temperature, humidity, wind speed, and general weather description for the forecast period. Ensure the summary is concise and natural.
      2. Don't say Here's a 5-line summary in Persian based on the provided weather forecast data for city_name, just return the summary in Persian.

      """
      weather_info = llm.generate_content(summary_prompt).text

      state["city"] = corrected_city

    state["weather_info"] = weather_info

    return state

# debug

fake_state: TripState = {
    "user_input": " من اصفهانی ام و قراره از تهران برم تبریز",
    "user_interests": [],
    "weather_info": "",
    "final_itinerary": ""
}

fake_node = weather_node(fake_state)

print(fake_node["weather_info"])

"""**Itinerary**"""

class ItinerarySchema(BaseModel):
    itinerary: str

itinerary_parser = JsonOutputParser(pydantic_object=ItinerarySchema)

itinerary_prompt = PromptTemplate.from_template(
    """You are an expert Persian-speaking travel planner with extensive knowledge of global destinations. Create a comprehensive {days}-day itinerary for {city}.

    مشخصات سفر:
    - علایق مسافر: {interests}
    - اطلاعات آب و هوا: {weather}
    - مدت سفر: {days} روز

    دستورالعمل‌های مهم:
    - تمام پاسخ باید به زبان فارسی کامل باشد
    - از ایموجی‌های مناسب استفاده کن
    - برنامه را بر اساس آب و هوا و علایق شخصی‌سازی کن

    ساختار خروجی مورد نیاز:

    #### 🏙 معرفی شهر {city}
    - توضیح کلی درباره شهر
    - ویژگی‌های منحصر به فرد
    - بهترین زمان بازدید

    #### 🗓 برنامه روزانه ({days} روز)
    برای هر روز شامل:
    - صبح (8:00-12:00): فعالیت‌ها و مکان‌های پیشنهادی
    - ظهر (12:00-15:00): رستوران‌ها و غذاهای محلی
    - عصر (15:00-18:00): جاذبه‌های گردشگری
    - شب (18:00-22:00): فعالیت‌های شبانه و سرگرمی

    #### 🏛 مکان‌های دیدنی اصلی
    - فهرست کامل جاذبه‌های گردشگری
    - اولویت‌بندی بر اساس علایق مسافر
    - زمان پیشنهادی برای هر مکان

    #### 🍽 پیشنهادات غذا و رستوران
    - غذاهای محلی حتمی
    - بهترین رستوران‌ها در هر منطقه
    - محدوده قیمت

    #### 🚌 حمل و نقل
    - بهترین روش‌های جابجایی در شهر
    - کارت‌های حمل و نقل عمومی
    - نکات مهم برای تاکسی و اوبر

    #### 🏨 پیشنهادات اقامت
    - بهترین مناطق برای اقامت
    - انواع هتل بر اساس بودجه
    - نکات مهم رزرو

    #### 💡 نکات و توصیه‌های مهم
    - نکات ایمنی
    - آداب و رسوم محلی
    - چیزهایی که باید با خود داشته باشید
    - نکات مربوط به آب و هوا

    #### 🛍 خرید و سوغات
    - بهترین مراکز خرید
    - سوغات‌های محلی
    - بازارهای سنتی

    #### 📱 اطلاعات تماس مفید
    - شماره‌های ضروری
    - آدرس‌های مهم
    - اپلیکیشن‌های کاربردی

    توجه: برنامه را کاملاً شخصی‌سازی کن و بر اساس آب و هوای {weather} و علایق {interests} تنظیم کن. متن کامل و جامع بنویس و از جزئیات غافل نشو.

    {format_instructions}"""
).partial(format_instructions=itinerary_parser.get_format_instructions())

def itinerary_node(state: TripState) -> TripState:
    city = state["city"]

    prompt = itinerary_prompt.format(
        days=3,
        city=city,
        interests=", ".join(state["user_interests"]),
        weather=state["weather_info"]
    )

    response = llm.generate_content(prompt).text
    parsed_result = itinerary_parser.parse(response)

    state["final_itinerary"] = parsed_result["itinerary"]
    return state

graph = StateGraph(TripState)

graph.add_node("process_interests", interest_node)
graph.add_node("get_weather", weather_node)
graph.add_node("create_itinerary", itinerary_node)

graph.add_edge(START, "process_interests")
graph.add_edge("process_interests", "get_weather")
graph.add_edge("get_weather", "create_itinerary")
graph.add_edge("create_itinerary", END)

app = graph.compile()

from IPython.display import Image, display
display(Image(app.get_graph().draw_mermaid_png()))

#debug

user_request = "I'm planning a 3‑day trip to Istanbul. I like art, coffee, and local culture."
output = app.invoke( {"user_input": user_request}  )

print( output["final_itinerary"] )

def run_agent(query :str):
  output = app.invoke( {"user_input": query}  )
  return output["final_itinerary"]

"""**UserInterface**"""

import gradio as gr, time

def respond(message, history):
    result = run_agent(message)

    partial = ''
    for token in result.split():
        partial += token + ' '
        time.sleep(0.015)
        yield partial

demo = gr.ChatInterface(
    respond,
    title = " ✈️ راهنمای سفر " ,
)

demo.launch(debug=True)